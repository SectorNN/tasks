import json
import telebot
import sql
import logger
from tg_token import tg_token
from datetime import date, datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton


bot = telebot.TeleBot(tg_token, parse_mode='HTML')


def go_start(cb):
    head = "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –æ–ø–µ—Ä–∞—Ü–∏—é:"
    bot.edit_message_text(head, cb.from_user.id, cb.message.id, reply_markup=gen_m_menu())


def gen_m_menu():
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    markup.add(InlineKeyboardButton("–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å üöó", callback_data=json.dumps({"act": "rent_1", "id": False})),
               InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –±–∞–∑—É ‚ûï", callback_data=json.dumps({"act": "add"})),
               InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ –±–∞–∑—ã ‚ûñ", callback_data=json.dumps({"act": "del_1", "id": False})),
               InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –ø–æ-—É–º–æ–ª—á–∞–Ω–∏—é ‚ôªÔ∏è", callback_data=json.dumps({"act": "reload"})),
               InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å –ª–æ–≥ üìã", callback_data=json.dumps({"act": "getlog"})))
    return markup


def gen_cars_menu(action):
    markup = InlineKeyboardMarkup()
    markup.row_width = 1
    cars = sql.db_get_cars()
    for i in cars:
        if i[6] and i[6] > datetime.now():
                car_row = "üî¥ "
        else:
            car_row = "üü¢ "
        car_row += f"{i[1]} [{i[2]}/{i[3]}] ‚û°Ô∏è"
        markup.add(InlineKeyboardButton(car_row, callback_data=json.dumps({"act": action, "id": str(i[0])})))
    markup = gen_back(markup)
    return markup


def confirm_car(id, action):
    markup = InlineKeyboardMarkup()
    markup.row_width = 2
    markup.add(InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å ‚úÖ", callback_data=json.dumps({"act": action, "id": str(id), "confirm": True})),
               InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", callback_data=json.dumps({"act": "start"})))
    return markup


def get_car_info(id):
    car = sql.db_get_car_info(id)
    car = f"–ú–æ–¥–µ–ª—å: <b>{car[1]}</b>\n–ì–æ–¥: <b>{car[2]}</b>\n–ö–ü–ü: <b>{car[3]}</b>\n–ú–æ—â–Ω–æ—Å—Ç—å: <b>{car[4]}</b>\n–ö–ª–∞—Å—Å: <b>{car[5]}</b>\n"
    return car


def gen_back(markup=()):
    if not markup:
        markup = InlineKeyboardMarkup()
        markup.row_width = 1
    markup.add(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ ‚è™", callback_data=json.dumps({"act": "start"})))
    return markup


@ bot.message_handler(commands=['start', 'help'])
def command_answer(message):
    head = "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π! ü§ñ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –æ–ø–µ—Ä–∞—Ü–∏—é:"
    logger.write(
        f"Recieved command {message.text} from {message.from_user.username} ({message.from_user.first_name} {message.from_user.last_name})")
    bot.send_message(message.chat.id, head, reply_markup=gen_m_menu())


@ bot.message_handler(func=lambda m: True)
def dump(message):
    logger.write(
        f"Recieved message: {message.text} from {message.from_user.username} ({message.from_user.first_name} {message.from_user.last_name})")
    if "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ" in message.reply_to_message.text and message.reply_to_message.from_user.id == 5467228530:
        car = list(map(lambda x: x.strip(), message.text.split(",")))
        if len(car) != 5:
            head = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ —Å–æ–≥–ª–∞—Å–Ω–æ —à–∞–±–ª–æ–Ω—É!\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n<pre>name, year, gbox, engine, class</pre>\n\n–ü—Ä–∏–º–µ—Ä:\n\nHammer H2, 2007, AT, 315, Premium"
            bot.send_message(message.chat.id, head, reply_markup=telebot.types.ForceReply(selective=False))
        else:
            sql.db_append((car[0], car[1], car[2], car[3], car[4], None))
            bot.send_message(message.chat.id, f"‚òëÔ∏è –ê–≤—Ç–æ–º–æ–±–∏–ª—å <b>{car[0]}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!", reply_markup=gen_back())
            logger.write(
                f"Car added: {car[0]} from {message.from_user.username} ({message.from_user.first_name} {message.from_user.last_name})")


@ bot.callback_query_handler(func=lambda cb: True)
def callback_query(cb):
    global cars
    logger.write(f"Recieved callback: {cb.data} from {cb.from_user.username} ({cb.from_user.first_name} {cb.from_user.last_name})")
    cb_data = json.loads(cb.data)
    if 'id' in cb_data:
        id = int(cb_data["id"])

    match cb_data["act"]:

        case "rent_1":
            head = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å:"
            bot.edit_message_text(head, cb.from_user.id, cb.message.id, reply_markup=gen_cars_menu("rent_2"))

        case "rent_2":
            car = sql.db_get_car_info(id)
            if car[6] and car[6] > datetime.now():
                head = f"‚ùå –≠—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –¥–æ {car[6].strftime('%d.%m.%y %H:%M')}.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–∏—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å!"
                bot.answer_callback_query(cb.id, head, show_alert=True)
            else:
                head = "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ:\n\n" + get_car_info(id)
                bot.edit_message_text(head, cb.from_user.id, cb.message.id, reply_markup=confirm_car(id, 'rent_3'))

        case "rent_3":
            car = sql.db_get_car_info(id)
            head = f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å <b>{car[1]}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ <b>{date.today()}</b> ‚úÖ\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –≤–æ–∂–¥–µ–Ω–∏—è! üöò"
            sql.db_set_rent(id)
            bot.edit_message_text(head, cb.from_user.id, cb.message.id, reply_markup=gen_back())
            logger.write(f"Car rent: {car[1]} to {cb.from_user.username} ({cb.from_user.first_name} {cb.from_user.last_name})")

        case 'add':
            head = "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n<pre>–ú–æ–¥–µ–ª—å, –≥–æ–¥, –ö–ü–ü, –º–æ—â–Ω–æ—Å—Ç—å, –∫–ª–∞—Å—Å</pre>\n\n–ü—Ä–∏–º–µ—Ä:\n\nHammer H2, 2007, AT, 315, Premium"
            bot.send_message(cb.from_user.id, head, reply_markup=telebot.types.ForceReply(selective=False))

        case "del_1":
            head = "–í—ã–±–∏—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å:"
            bot.edit_message_text(head, cb.from_user.id, cb.message.id, reply_markup=gen_cars_menu('del_2'))

        case "del_2":
            head = "–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å?\n\n" + get_car_info(id)
            bot.edit_message_text(head, cb.from_user.id, cb.message.id, reply_markup=confirm_car(id, 'del_3'))

        case "del_3":
            car = sql.db_get_car_info(id)
            head = f"‚òëÔ∏è –ê–≤—Ç–æ–º–æ–±–∏–ª—å {car[1]} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã!"
            sql.db_del(int(cb_data['id']))
            bot.answer_callback_query(cb.id, head)
            logger.write(f"Car delete: {car} via {cb.from_user.username} ({cb.from_user.first_name} {cb.from_user.last_name})")
            go_start(cb)

        case "start":
            head = "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –æ–ø–µ—Ä–∞—Ü–∏—é:"
            bot.edit_message_text(head, cb.from_user.id, cb.message.id, reply_markup=gen_m_menu())

        case "reload":
            sql.db_init()
            bot.answer_callback_query(cb.id, '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞! üîñ')

        case "getlog":
            with open('logdata.txt', 'r', encoding='UTF-8') as fh:
                bot.send_document(cb.from_user.id, fh)


print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

bot.infinity_polling()
